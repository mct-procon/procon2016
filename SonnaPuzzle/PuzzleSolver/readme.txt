--------------------------------動かし方---------------------------------
①「Visual Studio（バージョン10.0(Visual Studio 2010)以降)」にDxライブラリを導入します。

②master -> PuzzleSolver -> PuzzleSolverにて、WinAPIExt.h, WinAPIExt.cpp以外のソースファイルをプロジェクトに追加します。

③Main.cppに、読み込みたい問題ファイルのパス（場所）を指定します。

（④問題データはNewProblemフォルダ内のsample_●.txtのような書式で書きます。）

⑤適当にビルドします。



-------------------------------操作マニュアル--------------------------
とりあえず適当にエンターを押していれば、全自動で解いてくれます。

ピースの焼き目から表裏が分かるので、反転機能は使わないことになりました…


「表示」
マウスドラッグで表示位置の変更, マウス中ボタンの回転で拡大（縮小）をします。
十字キーでも表示位置を変更できます。
zキーで縮小, xキーで拡大もできます。

Spaceキーで表示が変わった気がしますが、忘れました。


「ユーザの操作」
UserQuery.cppを参考にしてほしいですが、依存関係が酷いので、解読不可能だと思います。

・左マウスで辺の選択（・解除）をします。選択した辺が何者かは、動かして察してください。（ヒント：半直線srcを半直線dstにくっつける移動をする）

・中マウスでピース辺をドラッグすると、ピースが移動します。

・右マウスで「余分な」ピース頂点を選択すると、頂点を削除することができます。バグったときにお使いください。ただし、削除がいらない場合は削除されません。

・エンターを押すとSolver.cppによってピースを1個動かします。（dst辺が未選択なら全自動, src辺が未選択なら半自動, どちらも選択してたら手動）

・動かす候補（青線）が表示されるので、N, Mキーで選択し、エンターで決定します。

・Backspaceで一個戻ります。よく分からないことになったら、適当にBackspaceを押してください。


「解法」
・解法は「評価関数を用いた貪欲法」です。

・多角形（ピース or 枠）を2つくっつけて、2つの多角形の一致度を計算します。
・それをすべての組み合わせ（頂点数^2オーダー）について計算します。
・もっとも高い一致度を持つくっつけ方で、多角形をくっつけます。
・くっつけた多角形を１つの多角形に置き換え（マージして）、同じ探索をします。


＜一致度は、基本的には、次のように計算します。＞
・形状が当たっていたら-114514点

・角度和が360度で位置が同じ2つの頂点について、2～4点を加えます。（動かした方のピースの角について、角度が90度から離れるほど高得点。95度で大体3点）
・2点の位置が同じ2つの辺について、4点を加えます。
・1点の位置が同じ2つの辺について、同じ向きなら1点を加え、逆向き（180度）なら2点を加えます。

動かせば大体どんなくっつけ方をするか分かります。



＜許容誤差的なお話＞
・辺の長さが短い程、辺の向きがおかしくなるので、それに合わせて角度の許容誤差の値を合わせた。

具体的には、permit_angle_error = arcsin(permit_dist_error / line_length);
みたいな雰囲気で計算。

大体5度くらい許容するせいで、間違った組み合わせを選ぶことが多い。


＜ピースのマージ＞
MargePoly.cppを参照
近い頂点をマージして、隣り合う頂点に辺貼って適当に回るだけ、だと思ったが、誤差で色々死んだ。
ので…グラフ構築をする前にピースを変形するなど、色々カオスなことをしている。


＜データ構造＞
頂点座標は複素数で表現します。

表示については、縦軸がImag軸で↓向きが正, 横軸がReal軸で→が正になっています。

複素数を直交座標系で表示することにより、回転操作を掛け算で表現できて実装が楽になります。

コメント中の「反時計回り, 時計回り」は、Imag軸が↑向きの場合を想定しているので、なんか逆っぽい感じになります。

------------------------------------------------------------------------





---------------------------------進捗-----------------------------------
今日が９月１１日
９月１３～１５日は合宿
ソースリスト提出が９月２６日
ほとんど進捗がない

間に合う気がしない。
私は200行以上のプログラムを書く前に、３日くらい寝込むので、Solver以外に手をつけていたら絶対間に合いません。ダレカタスケテ。
-----------------------------------------------------------------------




---------------------------------スキャンについて----------------------
カメラの精度（画素数ではなくて歪み）が不安なので、スキャナで撮る方法も考えたいです。

・スキャナのサイズがA4（297mm * 210mm)なので、枠は２回で撮れます。

・ピースは多分３回で撮れますが、巨大なピース（260mm * 260mm)が出現した場合、そのピースを分けてとることになります。

・スキャナで撮る時間は３分くらいかと思います。

・分けて撮った時、写真を上手く結合し、鈴木君の画像解析に渡す必要が出てきます。

・結合するためには、直線などの目印を書き、それを認識する必要があります。

・目印を認識できれば、あとは簡単です。
------------------------------------------------------------------------



--------------------------------分担------------------------------------
作れるところは積極的に作っていって、
naotti-dev -> SolverC -> SolverC -> src_自分の名前○フォルダ
にコミットしていってください。

ガンガン修正してよいです。
良さそうな機能があれば、使います。
私のソースコードで分からない点があれば言ってください。

ちなみに…
２時間以上かかる修正or追加をする場合は、やることを事前にみんなに伝えたほうが良いと思います。
すぐできるのであれば、言わなくて大丈夫です（伝える手間の方が大きいから）
-------------------------------------------------------------------------



-------------------------------データ構造「クラス」について-------------

・割と外からアクセスするので、クラス内の変数は基本publicにします。

・ただし、オブジェクト（実体）の外から直接書き込みをしないでください。

・つまり、メンバー変数は「読み込みonly」として使い、更新には「メソッド」を用いる。
-------------------------------------------------------------------------




------------------------------現在の進捗--------------------------------
src_naottiで作業中。

[09/22]
多角形のマージを実装しました。

ただし、枠とピースのマージが微妙にバグっています。
（MargePoly -> get_startPoint_id()のアルゴリズムが不十分。本来、枠にピースを埋めたあとに残る領域の頂点の1つを検出するが、頂点を検出できないケースが存在する。それはピースが枠の頂点を全て覆うケースである。）

dist_error, angle_errorはそれぞれ「距離（ピクセル）の許容誤差, 角度の許容誤差」ですが、ここら辺の設定値がちょっと闇です。marge_polyに渡すdist_errorの値だけは、他より1.5倍くらい大きい方が良い。

src_naottiのプログラムを実行すると一応動きます。途中結果の再生つき！
マウス左を押しながらドラッグ, 中ボタンクリックで表示箇所を変更できる。
s…再生停止, a…逆再生, d…再生, f…高速再生

読み込みファイルのパス, 書式は、Main.cpp, SolverBase.cppのinput()関数からエスパーしてください。


[10/05]
バグは完全に治りさったのだが、どうやって埋めるのかが分からなくてアレ
------------------------------------------------------------------------

ちくわのパフェなんだよ！






--------------------------プロコンを終えて----------------------------
・スキャニング, 回答のオーバーヘッドが大きすぎること
・制限時間が短すぎること（敗者復活戦いらない）
・人力が強すぎること
・大きいピースを取り除いて適当に敷き詰める作戦が最適になること（完成と最適解-1との間に大きな隔たりがあること）
は百歩譲ることにして…


「なぜパズル制作ツールの名前を公開しなかったんじゃーーーーーー」


というのが正直な感想です。


というのも、完成したパズルにおいて、ピースの全頂点が
「5mm方眼紙の頂点に乗る」らしいからです。


（これ知ってれば、誤差を最初に修正して、誤差なしソルバーを組めた可能性が高い…）

（そりゃあどんなパズルでも解けたほうが嬉しいけど、汎用ソルバーで人間を超えるのは敷居が高すぎる…）


とはいえ、ソルバーは普通に弱かったのでしょうがない。

適当な評価関数＆貪欲＆怪しい誤差パラメータによるクソルバーを作ってしまい、画像解析をしてくれた後輩氏には
申し訳がなさすぎる。


とりあえず、お疲れ様でした～



--------------------------------後日談--------------------------------
（卒研でパズルやろうと思ってたけど、パズル解いて嬉しいことってあるの？って聞かれたら間違いなく返答に詰まるし、
正直幾何は苦手なので、困ったなあ困ったなあ、と言う感じです。はい。）
